version: '3.1'
services:
  web:
    restart: always
    build: ./back-end
    volumes:
      - ./back-end:/var/www/
    depends_on:
      - db
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: my-postgres-db
      DB_PORT: 5432
      DB_DATABASE: gazin
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    networks:
      - app-network

  db:
    image: postgres:12.0-alpine
    restart: always
    hostname: my-postgres-db
    environment:
      POSTGRES_DB: gazin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - "./back-end/.docker/dbdata:/var/lib/postgresql/data"
    networks:
      - app-network

  nginx:
    build: ./back-end/.docker/nginx
    restart: always
    ports:
      - "8000:80"
    volumes:
      - ./back-end:/var/www
    depends_on:
      - web
    networks:
      - app-network
    # Serviço para a aplicação Node.js
    
  app:
    build: ./front-end
    ports:
      - "3000:3000" # Mapeia a porta 3000 do contêiner para a porta 3000 do host
    volumes:
      - ./front-end/app:/app # Mapeia a pasta do código-fonte para o contêiner (opcional, dependendo da necessidade)

  nginx-front:
    build:
      context: ./front-end
      dockerfile: Dockerfile # Usar o Dockerfile que configura o Nginx para servir os arquivos estáticos
    ports:
      - "80:80" # Mapeia a porta 80 do contêiner para a porta 80 do host
    volumes:
      - ./front-end/.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf # Mapeia o arquivo de configuração do nginx
    depends_on:
      - app # Garante que o contêiner do app seja iniciado antes do nginx
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
